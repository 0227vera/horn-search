<template>
  <custom-container
    title="订单详情"
    lefticon="arrow-left"
    containerBg="linear-gradient(#E3E0F3, #E3E0F3 89px, #ffffff)"
    clickLeft="{{clickLeft}}"
  >
    <view wx:if="{{loading}}" class="status">
      <van-loading type="spinner" color="#1989fa" vertical>加载中...</van-loading>
    </view>
    <view wx:else class="container">
      <item-container title="基本信息：">
        <base-info orderData="{{orderData}}" needList />
      </item-container>
      <item-container title="位置信息：">
        <cus-map endInfo="{{poi}}" />
      </item-container>
    </view>
  </custom-container>
  <nav-footer list="{{footerList}}" />
  <back-home showShare />
</template>

<script>
import mpx, { createPage } from '@mpxjs/core'
import { getReleaseOneById, updateRelease } from '@/api'
import store from '@/store'
import makePhoneToBoss from '@/utils/makePhoneToBoss'

createPage({
  onShareAppMessage() {
    const path = encodeURIComponent(`/order-detail/pages/detail-to-worker?id=${this._id}&fromOrigin=${this.fromOrigin}`)
    return {
      title: this.shareTitle,
      path: `/pages/page?type=mp&path=${path}`,
      imageUrl: this.images?.[0] || ''
    }
  },
  data: {
    loading: true,
    orderData: {},
    params: {},
    poi: {}
  },
  async onLoad(params) {
    this.setState({
      fromOrigin: params.fromOrigin
    })
    this.params = params
    if (!params.id) {
      this.clickLeft()
      return
    }
    this.loading = true
    const res = await getReleaseOneById(params)
    this.orderData = res.data || {}
    const { categoryName, categorySub, categoryNum, categoryTypeName, category, price, priceUnit, poi, tel, images, ownTimeName, note, status, calllist, _id, readlist } = res.data || {}
    this.poi = poi
    this.tel = tel
    this._id = _id
    this.images = images
    this.categoryName = categoryName
    this.categoryTypeName = categoryTypeName
    this.categoryNum = categoryNum
    this.categorySub = categorySub
    this.category = category
    this.loading = false
    this.readlistFunc(readlist)
  },
  computed: {
    ...store.mapState(['openid', 'fromOrigin']),
    clickLeft() {
      return () => {
        if (this.params.isBack === 'true') {
          mpx.navigateBack()
        } else {
          mpx.reLaunch({
            url: `/homepage/pages/index`
          })
        }
      }
    },
    footerList() {
      return [{
        name: '打电话',
        icon: 'phone-o',
        id: 'call',
        click: () => {
          const item = {
            tel: this.tel,
            calllist: this.calllist,
            _id: this._id
          }
          makePhoneToBoss(item)
        }
      }, {
        name: '导航去询问',
        icon: 'location-o',
        id: 'nav',
        click: () => {
          wx.openLocation({
            latitude: this.poi.location.lat,
            longitude: this.poi.location.lat,
            name: this.poi.name,
            address: this.poi.name
          })
        }
      }, {
        name: '分享给好友',
        icon: 'share-o',
        id: 'share',
        share: true
      }]
    }
  },
  methods: {
    ...store.mapMutations(['setState']),
    readlistFunc(readlist) {
      if (readlist?.length) {
        const isReaded = readlist.find(item => item.openid === this.openid)
        if (isReaded) {
          updateRelease({
            _id: this._id,
            readlist: readlist.map(item => {
              if (item.openid === store.state.openid) {
                item.times++
              }
              item.time.push(Date.now())
              return item
            })
          })
        } else {
          updateRelease({
            _id: this._id,
            readlist: readlist.concat({
              openid: this.openid,
              times: 1,
              time: [Date.now()]
            })
          })
        }
      } else {
        updateRelease({
          _id: this._id,
          readlist: [{
            openid: this.openid,
            times: 1,
            time: [Date.now()]
          }]
        })
      }
    },
    priview(item) {
      if (!item.islink) {
        return
      }
      wx.previewMedia({
        current: 0,
        sources: item.list.map(i => ({
          url: i,
          type: 'image'
        }))
      })
    }
  }
})

</script>

<style lang="stylus" scoped>
.container
  padding-bottom 60rpx
.status
  width 100%
  height 100%
  display flex
  justify-content center
  align-items center
.title
  width 100%
  height 80rpx
  padding 0 32rpx
  line-height 80rpx
  font-weight 500
  font-size 24rpx
  box-sizing border-box
.proccess
  width 100%
  box-sizing border-box
  padding 0 32rpx
  &-content
    overflow hidden
    border-radius 16rpx
</style>

<script type="application/json">
  {
    "usingComponents": {
      "custom-container": "@/compontens/base/custom-container",
      "cus-map": "@/compontens/common/map",
      "van-cell": "@vant/weapp/cell/index",
      "van-cell-group": "@vant/weapp/cell-group/index",
      "van-image": "@vant/weapp/image/index",
      "van-steps": "@vant/weapp/steps/index",
      "van-loading": "@vant/weapp/loading/index",
      "item-container": "../components/item-container",
      "van-button": "@vant/weapp/button/index",
      "nav-footer": "@/compontens/base/nav-footer.mpx",
      "base-info": "../components/base-info.mpx",
      "back-home": "@/compontens/base/back-home.mpx"
    },
    "navigationStyle": "custom"
  }
</script>
