
<template>
  <view class="container">
    <view  class="list">
      <view class="list-filter">
        <view class="list-filter-info">
          <view class="list-filter-info-item">
            <view class="list-filter-info-item_text">岗位筛选：</view>
            <view class="list-filter-info-item_value">{{filter.category.text || '全部'}}</view>
          </view>
          <view class="list-filter-info-item">
            <view class="list-filter-info-item_text">订单状态：</view>
            <view class="list-filter-info-item_value">{{filter.orderStatus.text || '全部'}}</view>
          </view>
          <view class="list-filter-info-item">
            <view class="list-filter-info-item_text">距离要求：</view>
            <view class="list-filter-info-item_value">{{filter.distance.text || '全部'}}</view>
          </view>
        </view>
        <view class="list-filter-opa" bind:tap="showFilter">
          <van-icon name="filter-o" />
          <text class="text">点击筛选</text>
        </view>
      </view>
    </view>
    <view wx:if="{{loading}}" class="loading">
      <van-loading type="spinner" color="#1989fa" vertical>加载中...</van-loading>
    </view>
    <view wx:elif="{{list.length}}" class="list">
      <card list="{{list}}" buttons="{{buttons}}" role="worker" bind:footer-btn="footerBtn" />
    </view>
    <view wx:else class="loading empty">
      <van-empty description="暂无数据"/>
    </view>
  </view>
  <worker-filter
    show="{{filter.show}}"
    categoryList="{{categoryList}}"
    bind:close="closeFilter"
    bind:sure="sureFilter"
  />
</template>

<script>
import mpx, { createComponent } from '@mpxjs/core'
import { getReleaseList, updateRelease } from '@/api'
import store from '@/store'
import makePhoneToBoss from '@/utils/makePhoneToBoss'

createComponent({
  properties: {
    categoryList: {
      type: Array,
      value: []
    }
  },
  data: {
    loading: true,
    list: [],
    filter: {
      show: false,
      category: {
        value: [],
        text: ''
      },
      distance: {
        value: [],
        text: ''
      },
      orderStatus: {
        value: [],
        text: ''
      },
      value: []
    },
    buttons: [{
      text: '打电话',
      id: 'call',
      type: 'primary',
      icon: 'phone-o'
    }, {
      text: '导航去',
      id: 'nav',
      icon: 'location-o'
    }, {
      text: '看详情',
      id: 'gotoDetail',
      icon: 'eye-o'
    }]
  },
  computed: {
    ...store.mapState(['openid']),
    listParams() {
      const params = {}
      const { category, orderStatus } = this.filter
      if (category.value?.length) {
        Object.assign(params, {
          category: ['in', category.value]
        })
      }
      if (orderStatus.value?.length) {
        Object.assign(params, {
          status: ['in', orderStatus.value]
        })
      }
      if (Object.keys(params).length) {
        return { and: params }
      } else {
        return {}
      }
    }
  },
  attached() {
    console.log(this.categoryList)
    this.getList()
  },
  methods: {
    async getList() {
      this.loading = true
      this.list = []
      const res = await getReleaseList(this.listParams)
      this.loading = false
      this.list = res.data?.list || []
    },
    footerBtn(e) {
      const { item, buttonInfo } = e.detail
      switch (buttonInfo.id) {
        case 'call':
          this.makePhone(item)
          break
        case 'nav':
          this.gotoAddress(item)
          break
        case 'gotoDetail':
          this.gotoDetail(item)
          break
      }
    },
    async makePhone(item) {
      makePhoneToBoss(item)
    },
    gotoAddress(item) {
      wx.openLocation({
        latitude: item.poi.location.lat,
        longitude: item.poi.location.lat,
        name: item.poi.name,
        address: item.poi.name
      })
    },
    gotoDetail(item) {
      mpx.navigateTo({ url: `/order-detail/pages/detail-to-worker?id=${item._id}&isBack=true&fromOrigin=${this.fromOrigin}` })
    },
    showFilter() {
      this.filter.show = true
    },
    closeFilter() {
      this.filter.show = false
    },
    sureFilter({ detail } = {}) {
      Object.keys(detail).forEach(item => {
        console.log(item)
        this.filter[item] = detail[item] || this.filter[item]
      })
      this.getList()
    }
  }
})
</script>

<style lang="stylus" scoped>
.container
  padding-bottom 50rpx
.loading
  width 100%
  height 70vh
  display flex
  align-items center
  justify-content center
.list
  padding 0 32rpx
  box-sizing border-box
  &-filter
    display flex
    margin-bottom 16rpx
    &-info
      flex 1
      overflow hidden
      &-item
        display flex
        align-items center
        font-weight bold
        margin-bottom 4rpx
        &_text
          font-size 28rpx
        &_value
          color #ee0a24
          font-sizi 32rpx
    &-opa
      background #ffffff
      box-sizing border-box
      border-radius 16rpx
      height 60rpx
      width 150rpx
      margin-top 16rpx
      display flex
      justify-content center
      align-items center
      font-weight bold
      .text
        font-size 24rpx
.tags
  display flex
  margin-bottom 10rpx
  &-item
    color red
    font-size 20rpx
    border 2rpx dashed red
    padding 4rpx 6rpx
    border-radius 4rpx
    margin-right 6rpx
    background rgba(0,0,0,0.1)
.item-info
  margin-bottom 8rpx
  &-title
    font-weight 500
.sub-container
  width 100%
  height 80%
  display flex
  flex-direction column
  align-items center
  justify-content center
  .img
    width 540rpx
    margin-bottom 40rpx
</style>

<script type="application/json">
  {
    "usingComponents": {
      "card": "@/compontens/common/card/index.mpx",
      "van-loading": "@vant/weapp/loading/index",
      "van-card": "@vant/weapp/card/index",
      "van-button": "@vant/weapp/button/index",
      "van-icon": "@vant/weapp/icon/index",
      "van-empty": "@vant/weapp/empty/index",
      "worker-filter": "@/subpackages/superstream/compontens/popup/worker-filter.mpx"
    },
    "disableScroll": true
  }
</script>
