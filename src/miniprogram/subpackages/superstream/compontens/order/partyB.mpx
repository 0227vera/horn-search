
<template>
  <view class="container">
    <view class="list" wx:if="{{renderFilterList.length}}">
      <scroll-view scroll-x style="width: 100%;" class="list-scroll">
        <view class="list-filter">
          <block wx:for="{{renderFilterList}}" wx:key="id">
            <view class="list-filter-item">
              <van-dropdown-menu
                active-color="#1989fa"
                title-class="dropdown"
                duration="{{0}}"
              >
                <van-dropdown-item
                  bind:change="changeCategoryType"
                  bind:open="openDropdown"
                  bind:close="closeDropdown"
                  title="{{item.text}}"
                  id="{{item.id}}"
                  root-portal
                  popup-style="top: {{top}}px; border-radius: 32rpx;"
                >
                  <view class="filter-container">
                    <view class="filter-title">{{item.initText}}</view>
                    <!-- 分类树选择 -->
                    <van-tree-select
                      main-item-class="left-item"
                      content-item-class="right-item"
                      wx:if="{{item.type === 'category'}}"
                      height="50vh"
                      main-active-class="left-select"
                      content-active-class="right-select"
                      items="{{ item.list }}"
                      max="{{ item.max }}"
                      main-active-index="{{ mainActiveIndex }}"
                      active-id="{{ item.value }}"
                      bind:click-nav="onClickNav"
                      bind:click-item="onClickItem"
                      id="{{item.id}}"
                    />
                    <!-- 单选 -->
                    <van-radio-group value="{{ item.value }}" wx:elif="{{item.type === 'radio'}}" bind:change="onRadioChange" id="{{item.id}}">
                      <van-cell-group>
                        <van-cell wx:for="{{item.list}}" wx:for-item="radio" wx:key="value" title="{{radio.name}}" clickable data-name="{{radio.value}}" data-id="{{item.id}}" bind:click="onItemClick">
                          <van-radio slot="right-icon" name="{{radio.value}}" />
                        </van-cell>
                      </van-cell-group>
                    </van-radio-group>
                    <!-- 多选 -->
                    <view style="max-height: 50vh; overflow-x: hidden;" wx:elif="{{item.type === 'checkbox'}}">
                      <van-checkbox-group value="{{ item.value }}" bind:change="onCheckboxChange" id="{{item.id}}">
                        <van-cell-group>
                          <van-cell
                            wx:for="{{ item.list }}"
                            wx:key="*this"
                            wx:for-item="checkou"
                            title="{{ checkou.name }}"
                            value-class="value-class"
                            clickable
                            data-index="{{ index }}"
                            bind:click="toggle"
                            data-id="{{item.id}}"
                            data-value="{{checkou.value}}"
                          >
                            <van-checkbox
                              catch:tap="noop"
                              shape="square"
                              class="checkboxes-{{ index }}"
                              name="{{ checkou.value }}"
                            />
                          </van-cell>
                        </van-cell-group>
                      </van-checkbox-group>
                    </view>
                    <!-- 区间输入 -->
                    <view wx:elif="{{item.type === 'range'}}" class="range">
                      <view wx:for="{{item.mergeList}}" wx:key="id" wx:for-item="merge" class="range-item">
                        <view class="range-item-label">{{merge.label}}</view>
                        <input class="range-item-input" id="{{merge.id}}" data-name="{{'min'}}" data-fatherid="{{item.id}}" value="{{merge.value.min}}" type="number" placeholder="{{merge.placeholder[0]}}" bind:input="onFieldChange" />
                        <view class="range-item-middle">~</view>
                        <input class="range-item-input" id="{{merge.id}}" data-name="{{'max'}}" value="{{merge.value.max}}" data-fatherid="{{item.id}}" type="number" placeholder="{{merge.placeholder[1]}}" bind:input="onFieldChange" />
                        <view class="range-item-unit">{{merge.unit}}</view>
                      </view>
                    </view>
                    <!-- 距离 -->
                    <view class="distance" wx:elif="{{item.type === 'dropdown'}}">
                      <van-slider value="{{item.value}}" use-button-slot range bind:change="onDistanceChange" id="{{item.id}}">
                        <view class="custom-button" slot="left-button">{{ (item.value[0] || 0) / 10}}km</view>
                        <view class="custom-button" slot="right-button">{{ (item.value[1] || 100) / 10}}km</view>
                      </van-slider>
                    </view>
                    <!-- 模糊搜索 -->
                    <view wx:if="{{item.type === 'like'}}">
                      <van-field
                        size="large"
                        title-width="160rpx"
                        label="{{item.label}}"
                        value="{{item.value}}"
                        placeholder="{{item.placeholder}}"
                        bind:change="onChangeInput"
                        id="{{item.id}}"
                      />
                      <view class="notice" wx:class="{{city || district || street || street_number}}">
                        <view class="notice-title">
                          <mutil-style-text text="您的位置信息如下{(点击可快速输入)}:" rules="{{textRules}}" />
                        </view>
                        <view class="notice-item" wx:if="{{city}}">
                          <view class="notice-item-label">城市:</view>
                          <view class="notice-item-value">{{city}}</view>
                          <van-button round size="small" bind:tap="setInput(item.id, city)">填入城市</van-button>
                        </view>
                        <view class="notice-item" wx:if="{{district}}">
                          <view class="notice-item-label">区域:</view>
                          <view class="notice-item-value">{{district}}</view>
                          <van-button round size="small" bind:tap="setInput(item.id, district)">填入区域</van-button>
                        </view>
                        <view class="notice-item" wx:if="{{street}}">
                          <view class="notice-item-label">街道:</view>
                          <view class="notice-item-value">{{street}}</view>
                          <van-button round size="small" bind:tap="setInput(item.id, street)">填入街道</van-button>
                        </view>
                        <view class="notice-item" wx:if="{{street_number}}">
                          <view class="notice-item-label">街道号:</view>
                          <view class="notice-item-value">{{street_number}}</view>
                          <van-button round size="small" bind:tap="setInput(item.id, street_number)">填入街道号</van-button>
                        </view>
                      </view>
                      <view wx:class="{{item.tips}}" class="tips">备注：{{item.tips}}</view>
                    </view>
                    <view class="filter-container-btn">
                      <van-button class="btn" block round bind:tap="reset(item)">重置</van-button>
                      <van-button class="btn" type="primary" block round bind:tap="filterSure(item)">确定</van-button>
                    </view>
                  </view>
                </van-dropdown-item>
              </van-dropdown-menu>
            </view>
          </block>
        </view>
      </scroll-view>
    </view>
    <skeleton wx:if="{{loading}}" mstyle="padding: 0 32rpx;" />
    <view wx:elif="{{list.length}}" class="card-list">
      <card
        list="{{list}}"
        fromOrigin="{{this.fromOrigin}}"
        buttons="{{buttons}}"
        role="worker"
        moreLoad="{{moreLoad}}"
        bind:footer-btn="footerBtn"
        bind:more-load="moreLoadHandle"
      />
    </view>
    <view wx:else class="loading empty">
      <van-empty />
      <view class="text">暂无数据</view>
    </view>
  </view>
</template>

<script>
import mpx, { createComponent } from '@mpxjs/core'
import config, { categoryMap } from '@/constant/release.js'
import { getReleaseList, updateRelease } from '@/api'
import store from '@/store'
import makePhoneToBoss from '@/utils/makePhoneToBoss'
import { pageInfo } from '@/subpackages/superstream/utils/constant.js'
import { getDistance } from '@/subpackages/superstream/utils/utils.js'
import jumpAction from '@/utils/jump'

createComponent({
  properties: {
    categoryTypeId: {
      type: String,
      value: ''
    },
    updateList: {
      type: Boolean,
      value: false
    },
    toBottom: {
      type: Boolean,
      value: false
    },
    toTop: {
      type: Boolean,
      value: false
    },
    isDrag: {
      type: Boolean,
      value: false
    }
  },
  data: {
    loading: true,
    page: JSON.parse(JSON.stringify(pageInfo)),
    textRules: {
      '{x}': {
        style: 'color: #ff525d; font-weight: bold;'
      }
    },
    renderFilterList: [],
    mainActiveIndex: 0,
    moreLoad: {
      loading: false,
      isClick: true,
      text: '~~没有更多啦~~'
    },
    list: [],
    filter: {}
  },
  computed: {
    ...store.mapState(['openid', 'fromOrigin', 'showBottomNav', 'navBarStyle', 'adInfo', 'mapSdk']),
    buttons() {
      return [{
        text: '打电话',
        id: 'call',
        type: 'primary',
        icon: 'phone-o'
      }, {
        text: '导航去',
        id: 'nav',
        icon: 'location-o',
        isExtraCondition: this.fromOrigin === 'factoryCooper'
      }, {
        text: '看详情',
        id: 'gotoDetail',
        icon: 'eye-o'
      }]
    },
    bottom() {
      return config[this.categoryTypeId]?.partyB?.bottom
    },
    top() {
      return 50 + this.navBarStyle.height + this.navBarStyle.top + this.navBarStyle.paddingBottom
    },
    city() {
      return this.adInfo?.address_component?.city || ''
    },
    district() {
      return this.adInfo?.address_component?.district || ''
    },
    street() {
      return this.adInfo?.address_component?.street || ''
    },
    street_number() {
      return this.adInfo?.address_component?.street_number || ''
    },
    categoryList() {
      return config[this.categoryTypeId].category
    },
    listParams() {
      const params = {
        status: ['in', ['2', '3']]
      }
      Object.keys(this.filter).forEach(item => {
        const value = this.filter[item]
        // if (item === 'distance') {
        //   Object.assign(params, {
        //     location: {
        //       ...this.adInfo?.location || {},
        //       minDistance: value[0] * 100,
        //       maxDistance: value[1] * 100
        //     }
        //   })
        // } else
        if (item === 'area' && value?.length) {
          Object.assign(params, {
            [item]: ['like', value]
          })
        } else if (value?.length) {
          // array or string
          if (typeof value === 'string') {
            Object.assign(params, {
              [item]: ['in', [value]]
            })
          } else {
            Object.assign(params, {
              [item]: ['in', value]
            })
          }
        } else if (typeof value === 'object') {
          if (value.min && value.max) {
            Object.assign(params, {
              [item]: ['between', +value.min, +value.max]
            })
          } else if (value.min) {
            Object.assign(params, {
              [item]: ['>=', +value.min]
            })
          } else if (value.max) {
            Object.assign(params, {
              [item]: ['<=', +value.max]
            })
          }
        }
      })
      return { and: params, ...this.page }
    },
    filterList() {
      return config[this.categoryTypeId].filterList || []
    }
  },
  watch: {
    filterSure(val) {
      this.renderFilterList = JSON.parse(JSON.stringify(val))
    },
    updateList() {
      this.list = []
      this.renderFilterList = JSON.parse(JSON.stringify(this.filterList))
      this.loading = true
      this.page = JSON.parse(JSON.stringify(pageInfo))
      this.getList()
    },
    adInfo: {
      handler(val) {
        if (val?.location?.lat) {
          this.list.forEach(item => {
            item.distance = getDistance(val.location.lat, val.location.lng, item.poi.location.lat, item.poi.location.lng).toFixed(1)
          })
          this.list = this.list.sort((a, b) => a.distance - b.distance)
        }
      },
      immediate: true
    }
  },
  attached() {
    this.renderFilterList = JSON.parse(JSON.stringify(this.filterList))
    this.getList()
    getApp().eventBus.on('scroll-to-lower', () => {
      this.moreLoadHandle()
    })
  },
  detached() {
    getApp().eventBus.removeListener('scroll-to-lower')
  },
  methods: {
    ...store.mapMutations(['setState']),
    async getList() {
      this.moreLoad.loading = true
      const res = await getReleaseList(this.listParams)
      const { list, total } = res.data || {}
      if (this.adInfo?.location?.lat) {
        list.forEach(item => {
          item.distance = getDistance(this.adInfo.location.lat, this.adInfo.location.lng, item.poi.location.lat, item.poi.location.lng).toFixed(1)
        })
      }
      this.loading = false
      this.moreLoad.loading = false
      this.list = this.list.concat(list || [])
      if (this.fromOrigin !== 'factoryCooper' && !this.filter.cooperType?.length) {
        this.list = this.list.sort((a, b) => a.distance - b.distance)
      }
      if (this.list.length < total) {
        this.moreLoad.text = '~点击加载更多~'
        this.moreLoad.isClick = true
      } else {
        this.moreLoad.isClick = false
        this.moreLoad.text = '~~没有更多啦~~'
      }
    },
    moreLoadHandle() {
      if (!this.moreLoad.isClick || this.loading || this.moreLoad.loading) return
      this.page.page++
      this.getList()
    },
    footerBtn(e) {
      const { item, buttonInfo } = e.detail
      switch (buttonInfo.id) {
        case 'call':
          this.makePhone(item)
          break
        case 'nav':
          this.gotoAddress(item)
          break
        case 'gotoDetail':
          this.gotoDetail(item)
          break
      }
    },
    async makePhone(item) {
      makePhoneToBoss(item)
    },
    gotoAddress(item) {
      wx.openLocation({
        latitude: item.poi.location.lat,
        longitude: item.poi.location.lat,
        name: item.poi.name,
        address: item.poi.name
      })
    },
    gotoDetail(item) {
      mpx.navigateTo({ url: `/order-detail/pages/detail-to-worker?id=${item._id}&isBack=true&fromOrigin=${this.fromOrigin}` })
    },
    openDropdown() {
      this.setState({
        showBottomNav: false
      })
    },
    closeDropdown() {
      this.setState({
        showBottomNav: true
      })
    },
    onClickNav({ detail = {} }) {
      this.mainActiveIndex = detail.index
    },
    onClickItem(e) {
      const { detail, target } = e
      this.renderFilterList.forEach(item => {
        if (item.id === target.id) {
          if (item.value.includes(detail.id)) {
            item.value = item.value.filter(f => f !== detail.id)
            item.activeList = item.activeList.filter(f => f.id !== detail.id)
          } else {
            item.value.push(detail.id)
            item.activeList.push(detail)
          }
          item.cacheText = item.activeList.map(m => m.text).join('/') || item.initText
        }
      })
    },
    onItemClick(e) {
      const { currentTarget } = e
      const { dataset } = currentTarget
      const { name, id } = dataset
      this.renderFilterList.forEach(item => {
        if (item.id === id) {
          item.value = name
          item.cacheText = item.list.find(f => f.value === name).name
        }
      })
    },
    onRadioChange(e) {
      const { detail, target } = e
      this.renderFilterList.forEach(item => {
        if (item.id === target.id) {
          item.value = detail
          item.activeList = item.list.filter(f => item.value.includes(f.value))
          item.cacheText = item.activeList.map(m => m.name).join('/') || item.initText
        }
      })
    },
    onCheckboxChange(e) {
      const { detail, target } = e
      this.renderFilterList.forEach(item => {
        if (item.id === target.id) {
          item.value = detail
          item.activeList = item.list.filter(f => item.value.includes(f.value))
          item.cacheText = item.activeList.map(m => m.name).join('/') || item.initText
        }
      })
    },
    toggle(e) {
      const { currentTarget } = e
      const { dataset } = currentTarget
      const { index, id, value } = dataset
      const checkbox = this.selectComponent(`.checkboxes-${index}`)
      this.renderFilterList.forEach(item => {
        if (item.id === id) {
          if (item.value.includes(value)) {
            item.value = item.value.filter(f => f !== value)
          } else {
            item.value.push(value)
          }
          item.activeList = item.list.filter(f => item.value.includes(f.value))
          item.cacheText = item.activeList.map(m => m.name).join('/') || item.initText
        }
      })
      checkbox.toggle()
    },
    noop() {},
    onFieldChange(e) {
      const { detail, target } = e
      const { fatherid, name } = target.dataset
      this.renderFilterList.forEach(item => {
        if (item.id === fatherid) {
          item.mergeList.forEach(merge => {
            if (merge.id === target.id) {
              merge.value[name] = detail.value
            }
          })
        }
      })
    },
    onDistanceChange(e) {
      const { detail, target } = e
      this.renderFilterList.forEach(item => {
        if (item.id === target.id) {
          item.value = detail
        }
      })
    },
    onChangeInput(e) {
      const { detail, target } = e
      this.renderFilterList.forEach(item => {
        if (item.id === target.id) {
          item.cacheText = detail
          item.value = detail
        }
      })
    },
    setInput(id, detail) {
      this.renderFilterList.forEach(item => {
        if (item.id === id) {
          item.cacheText = detail
          item.value = detail
        }
      })
    },
    reset(detail) {
      this.renderFilterList.forEach(item => {
        if (item.id === detail.id) {
          item.text = detail.initText
          item.cacheText = detail.initText
          item.value = typeof item.value === 'string' ? '' : []
          item.activeList = []
          item.mergeList?.forEach?.(f => {
            f.value.min = ''
            f.value.max = ''
            this.filter[f.id] = {}
          })
        }
      })
      this.filter[detail.id] = []
      this.selectComponent(`#${detail.id}`).toggle()
      this.loading = true
      this.list = []
      this.page = JSON.parse(JSON.stringify(pageInfo))
      this.getList()
    },
    filterSure(detail) {
      if (detail.type === 'range') {
        detail.mergeList.forEach(item => {
          if (item.value.min && item.value.max && (item.value.min > item.value.max)) {
            item.value = {
              min: item.value.max,
              max: item.value.min
            }
          }
          this.filter[item.id] = item.value
        })
      } else {
        this.filter[detail.id] = detail.value
      }
      this.renderFilterList.forEach(item => {
        if (item.id === detail.id) {
          item.text = detail.cacheText || item.text
        }
      })
      this.selectComponent(`#${detail.id}`).toggle()
      this.loading = true
      this.list = []
      this.page = JSON.parse(JSON.stringify(pageInfo))
      this.getList()
    },
    jumpAction(item) {
      jumpAction(item)
    }
  }
})
</script>
<style>

.van-empty__description{
  color: #000000;
  font-size: 28rpx;
  font-weight: bold;
}
.left-item{
  font-size: 32rpx;
}
.right-item{
  font-size: 32rpx;
}
.dropdown{
  color: #1989fa;
  font-weight: bold;
}
.value-class {
  flex: none !important;
}
.left-select{
  color: #1989fa !important;
  border-color: #1989fa !important;
}
.right-select{
  color: #1989fa !important;
}
</style>
<style lang="stylus" scoped>
@import "@/assets/base.styl"
.container
  overflow hidden
  flex-column()
  height 100%
.notice
  padding 16rpx 32rpx
  &-title
    font-size 28rpx
    padding-bottom 16rpx
    border-bottom $border
  &-item
    flex-center()
    font-size 28rpx
    margin-top 16rpx
    font-weight bold
    border-bottom $border
    padding-bottom 16rpx
    &-label
      margin-right 8rpx
    &-value
      flex 1
      overflow hidden
.tips
  padding 16rpx 32rpx
  color $color-red
  font-size 28rpx
.loading
  width 100%
  height 70vh
  flex-center()
  flex-column()
  .text
    font-size 28rpx
    color $color-main
    font-weight bold
.card-list
  padding 0 16rpx
  flex 1
  overflow-x hidden
.filter-title
  height 70rpx
  text-align center
  font-weight bold
  color #1989fc
  line-height 70rpx
  border-bottom 2rpx solid #ebedf0
.list
  &-scroll
    background #ffffff
    margin-bottom 16rpx
    height 44px
    overflow hidden
  &-filter
    display flex
    animation showIn 1s
    &-item
      overflow hidden
      max-width 250rpx
      flex-shrink 0
.sub-container
  width 100%
  height 80%
  display flex
  flex-direction column
  align-items center
  justify-content center
  .img
    width 540rpx
    margin-bottom 40rpx
.filter-container
  padding 16rpx 0
  &-btn
    padding 16rpx 16rpx
    display flex
    justify-content space-around
    .btn
      width 45%
  .distance
    padding 70rpx 50rpx
    .custom-button
      background #1989fa
      border-radius 16rpx
      padding 0 8rpx
      color #ffffff
  .range
    padding 0 32rpx
    &-item
      display flex
      align-items center
      margin-top 32rpx
      margin-bottom 32rpx
      border-bottom 2rpx solid #ebedf0
      padding-bottom 32rpx
      &:last-child
        border none
        padding-bottom 0
      &-label
        width 120rpx
        font-size 28rpx
        font-weight bold
      &-input
        text-align center
        font-size 32rpx
        background-color #f9f9f9
        border-radius 6rpx
        font-weight bold
        height 36rpx
        lint-height 36rpx
        flex 1
      &-middle
        margin 0 16rpx
      &-unit
        width 120rpx
        font-size 28rpx
        font-weight bold
        margin-left 16rpx
@-webkit-keyframes showIn
  from
    transform translateX(100%)
    opacity 0
  to
    transform translateX(0)
</style>

<script type="application/json">
  {
    "usingComponents": {
      "card": "@/subpackages/superstream/compontens/card/index.mpx",
      "mutil-style-text": "@/compontens/base/mutil-style-text.mpx?root=common-coms-page",
      "skeleton": "@/subpackages/superstream/compontens/card/skeleton.mpx"
    },
    "componentPlaceholder": {
      "mutil-style-text": "view"
    },
    "disableScroll": true
  }
</script>
