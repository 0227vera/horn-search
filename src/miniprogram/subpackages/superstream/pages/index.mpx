<template>
  <custom-container
    title="{{title}}"
    clickLeft="{{clickLeft}}"
    wx:show="{{pageShow}}"
    containerBg="linear-gradient(to bottom, #8aa7ec, #79b3f4, #ffffff)"
  >
    <view class="{{roleType === 'partyA' && currentCom === footerList[0].key ? 'component-container' : ''}}">
      <component
        is="{{currentCom}}"
        categoryTypeId="{{categoryTypeId}}"
        updateList="{{updateList}}"
        bind:release-jump-done="releaseJumpDone"
        bind:again-order="againOrder"
      />
    </view>
    <footer wx:if="{{shoeFooterList}}" list="{{footerList}}" initActive="{{currentCom}}" bind:tab-change="tabChange" />
  </custom-container>
  <popup
    show="{{showPopup}}"
    type="{{popupType}}"
    needShowRadio
    title="业务切换"
    radioList="{{radioList}}"
    bind:close="closePopupContainer"
    bind:confirm="onConfirmHandle"
    initRadio="{{fromOrigin}}"
  />
  <back-home showShare showBackHome="{{false}}" wx:if="{{roleType === 'partyB'}}"/>
  <van-dialog id="van-dialog" />
  <tips autoStyle="{{tipsStyle}}" key="superstream-tips" text="可点击进行类型切换" upLeft="170rpx" />
</template>

<script>
// node: 超级流转组件，最核心的功能和流转流程
import mpx, { createPage } from '@mpxjs/core'
import config, { categoryMap } from '@/constant/release.js'
const store = getApp().globalStore
createPage({
  onShareAppMessage() {
    return {
      path: '/pages/page'
    }
  },
  data: {
    currentCom: '',
    roleType: '',
    pageShow: false,
    categoryTypeId: '',
    popupType: 'radio',
    showPopup: false,
    updateList: false
  },
  async onLoad(params) {
    /**
     * type: 区分是boss还是worker
     * key: 确定使用哪个组件展示
     * id: 确定分类
     */
    const { type, key, id } = params
    // 当前的分类id，用于获取分类，常用配置等
    this.categoryTypeId = categoryMap[id]
    // 当前的身份，主要是甲乙两方，用于区分使用甲方或者乙方
    this.roleType = type
    // 当前的组件，用于甲方的切换的时候的初始化组件
    this.currentCom = key
    this.setState({
      fromOrigin: this.fromOrigin
    })
    // note: 页面中的异步分包太多了，强制晚加载一会
    setTimeout(() => {
      this.pageShow = true
    }, 500)
  },
  onShow() {
    this.setLocation()
    if (Object.keys(this.cacheForm).length) {
      this.currentCom = this.footerList[0].key
    }
    this.setNavBarStyle({
      showDropdown: true,
      clickDropdown: () => {
        this.showPopup = true
      }
    })
  },
  onHide() {
    this.setNavBarStyle({
      showDropdown: false,
      clickDropdown: null
    })
  },
  computed: {
    ...store.mapState(['showBottomNav', 'cacheForm', 'navBarStyle']),
    top() {
      return this.navBarStyle.height + this.navBarStyle.top + this.navBarStyle.paddingBottom
    },
    tipsStyle() {
      return `top: ${this.top}px;left: 170rpx`
    },
    clickLeft() {
      return () => {
        this.setNavBarStyle({
          showDropdown: false,
          clickDropdown: null
        })
        mpx.navigateBack()
      }
    },
    radioList() {
      let result = []
      if (this.roleType === 'partyA') {
        Object.keys(config).forEach(item => {
          result.push({
            name: config[item].partyA.title[this.footerList.findIndex(f => f.key === this.currentCom)],
            value: config[item].fromOrigin,
            key: item
          })
        })
      } else if (this.roleType === 'partyB') {
        Object.keys(config).forEach(item => {
          result.push({
            name: config[item].partyB.title,
            value: config[item].fromOrigin,
            key: item
          })
        })
      }
      return result
    },
    categoryConfig() {
      return config[this.categoryTypeId] || {}
    },
    categoryList() {
      return this.categoryConfig.category
    },
    fromOrigin() {
      return this.categoryConfig.fromOrigin
    },
    partyA() {
      return this.categoryConfig.partyA
    },
    partyB() {
      return this.categoryConfig.partyB
    },
    shoeFooterList() {
      return this.roleType === 'partyA' && this.showBottomNav
    },
    footerList() {
      return [{
        name: '发单',
        title: this.partyA?.title?.[0],
        icon: 'upgrade',
        key: this.fromOrigin
      }, {
        name: this.partyA?.title?.[1] || '订单列表',
        title: this.partyA?.title?.[1],
        icon: 'comment',
        key: 'order'
      }, {
        name: this.partyA?.title?.[2],
        title: this.partyA?.title?.[2],
        icon: 'birthday-cake-o',
        key: this.partyA?.extraCom,
        hide: !this.partyA?.extraCom,
        hideChange: true
      }]
    },
    title() {
      if (this.roleType === 'partyB') return this.partyB.title
      return this.footerList.find(item => item.key === this.currentCom)?.title || ''
    }
  },
  methods: {
    ...store.mapMutations(['setState', 'setNavBarStyle']),
    ...store.mapActions(['setLocation']),
    closePopupContainer() {
      this.showPopup = false
    },
    onConfirmHandle({ detail }) {
      const { data } = detail
      if (data.value === this.fromOrigin) {
        this.showPopup = false
        return
      }
      if (this.roleType === 'partyA') {
        if (this.currentCom === this.fromOrigin) {
          // note: 甲方且在编辑页面需要更新当前的表单组件
          this.currentCom = data.value
        } else {
          // note: 甲方在列表页面，需要刷新列表就行
          this.updateList = !this.updateList
        }
      } else {
        // note: 甲方只有列表页面，需要刷新列表就行
        this.updateList = !this.updateList
      }
      // note: 更新数据请求源
      this.setState({
        fromOrigin: data.value
      })
      // note: 更新配置
      this.categoryTypeId = data.key
      this.showPopup = false
    },
    tabChange(e) {
      this.currentCom = e.detail.key
      this.setNavBarStyle({
        showDropdown: !e.detail.hideChange
      })
    },
    releaseJumpDone(e) {
      mpx.navigateTo({
        url: `/order-detail/pages/detail-to-boss?isBack=true&id=${e.detail}&fromOrigin=${this.fromOrigin}`
      })
    },
    againOrder(e) {
      this.setState({
        cacheForm: e.detail
      })
      this.currentCom = this.footerList[0].key
    }
  }
})
</script>

<style lang="stylus" scoped>
.component-container
  width 100%
  height 100%
  overflow hidden
  padding-bottom 150rpx
</style>
<script type="application/json">
  {
    "usingComponents": {
      "custom-container": "@/compontens/base/custom-container",
      "popup": "@/subpackages/superstream/compontens/popup/index.mpx",
      "footer": "@/compontens/base/footer.mpx",
      "order": "@/subpackages/superstream/compontens/order",
      "bossWorker":"@/subpackages/superstream/compontens/release/boss-worker",
      "factoryCooper":"@/subpackages/superstream/compontens/release/factory-cooper",
      "leaseTransfer":"@/subpackages/superstream/compontens/release/lease-transfer",
      "employAppli":"@/subpackages/superstream/compontens/release/employ-appli",
      "usedDetect":"@/subpackages/superstream/compontens/release/used-detect",
      "tailings":"@/subpackages/superstream/compontens/release/tailings",
      "partyB": "@/subpackages/superstream/compontens/order/partyB.mpx",
      "tips": "@/compontens/base/tips.mpx?root=common-coms-page",
      "van-dialog": "@vant/weapp/dialog/index?root=vant-page",
      "company-list": "@/subpackages/superstream/compontens/extra/company-list.mpx"
    },
    "componentPlaceholder": {
      "tips": "view",
      "van-dialog": "view"
    },
    "disableScroll": true
  }
</script>
