<template>
  <custom-container title="{{title}}">
    <block wx:if="{{roleType === 'partyA'}}">
      <view class="component-container">
        <component
          is="{{currentCom}}"
          categoryList="{{categoryList}}"
          bind:release-jump-done="releaseJumpDone"
        ></component>
      </view>
      <footer wx:if="{{currentCom}}" list="{{footerList}}" initActive="{{currentCom}}" bind:tab-change="tabChange" />
    </block>
    <block wx:if="{{roleType === 'partyB'}}">
      <view>
        <worker />
      </view>
    </block>
  </custom-container>
  <back-home />
</template>

<script>
// node: 超级流转组件，最核心的功能和流转流程
import mpx, { createPage } from '@mpxjs/core'
import config, { categoryMap } from '@/constant/release.js'
const store = getApp().globalStore
const workerTitleMap = {
}
createPage({
  onShareAppMessage() {
    getApp().onShareAppMessage()
  },
  data: {
    currentCom: '',
    roleType: '',
    categoryTypeId: ''
  },
  async onLoad(params) {
    const { type, key, id } = params
    // 当前的分类id，用于获取分类，常用配置等
    this.categoryTypeId = categoryMap[id]
    // 当前的身份，展示不同的组件，主要是甲乙两方
    this.roleType = type
    // 当前的组件，用于甲方的切换
    this.currentCom = key
    this.setState({
      fromOrigin: this.fromOrigin
    })
  },
  computed: {
    categoryConfig() {
      return config[this.categoryTypeId] || {}
    },
    categoryList() {
      return this.categoryConfig.category
    },
    fromOrigin() {
      return this.categoryConfig.fromOrigin
    },
    partyA() {
      return this.categoryConfig.partyA
    },
    partyB() {
      return this.categoryConfig.partyB
    },
    footerList() {
      return [{
        name: '发单',
        title: this.partyA?.title?.[0],
        icon: 'upgrade',
        key: this.fromOrigin
      }, {
        name: '订单列表',
        title: this.partyA?.title?.[1],
        icon: 'comment',
        key: 'order'
      }]
    },
    title() {
      if (this.roleType === 'partyB') return this.partyB.title
      return this.footerList.find(item => item.key === this.currentCom)?.title || ''
    }
  },
  methods: {
    ...store.mapMutations(['setState']),
    tabChange(e) {
      this.currentCom = e.detail.key
    },
    releaseJumpDone() {
      setTimeout(() => {
        this.currentCom = 'order'
      }, 1000)
    }
  }
})
</script>

<style lang="stylus" scoped>
.component-container
  box-sizing border-box
  width 100%
  height 100%
  overflow hidden
  padding-bottom 150rpx
</style>
<script type="application/json">
  {
    "usingComponents": {
      "custom-container": "@/compontens/base/custom-container",
      "back-home": "@/compontens/base/back-home.mpx",
      "footer": "@/compontens/base/footer.mpx",
      "order": "@/subpackages/superstream/compontens/order",
      "bossWorker":"@/subpackages/superstream/compontens/release/boss-worker",
      "factoryCooper":"@/subpackages/superstream/compontens/release/factory-cooper",
      "worker": "@/subpackages/superstream/compontens/order/worker.mpx"
    },
    "disableScroll": true
  }
</script>
