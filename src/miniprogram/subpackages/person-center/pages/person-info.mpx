<template>
<custom-container
  title="主动求职"
  btnName="{{pageType === 'edit' ? '' : '发布'}}"
  bind:footer-btn="release"
>
  <van-cell-group inset>
    <!-- 技能相关 -->
    <van-field
      size="large"
      label="擅长岗位"
      title-width="160rpx"
      required
      is-link
      readonly
      autosize
      type="textarea"
      border="{{false}}"
      value="{{biographical.categoryName}}"
      input-align="right"
      placeholder="请点击选择您擅长的岗位"
      bind:tap="showPopupContainer('category')"
    />
    <!-- 位置相关 -->
    <van-field
      size="large"
      label="地址"
      title-width="80rpx"
      required
      is-link
      readonly
      type="textarea"
      autosize
      value="{{biographical.poi.detail}}"
      input-align="right"
      placeholder="请点击输入我的详细地址"
      bind:tap="showPopupContainer('address')"
    />
    <!-- 电话 -->
    <van-field
      size="large"
      label="电话"
      title-width="80rpx"
      readonly="{{!pageCanEdit}}"
      required
      value="{{ biographical.tel }}"
      type="number"
      placeholder="请输入联系方式"
      input-align="right"
      bind:change="onFieldChange"
      bind:tap="gotoChangeStatus"
      id="tel"
    />
    <!-- 时间先关 -->
    <van-field
      size="large"
      label="到岗时间"
      title-width="160rpx"
      is-link
      readonly
      border="{{false}}"
      value="{{biographical.time.start}}"
      input-align="right"
      placeholder="请点击选择您能到岗的时间"
      bind:tap="showPopupContainer('time', 'start')"
    />
    <van-field
      size="large"
      label="截止时间"
      title-width="160rpx"
      is-link
      readonly
      border="{{false}}"
      value="{{biographical.time.end}}"
      input-align="right"
      placeholder="请点击选择截止时间点"
      error-message="{{biographical.time.end ? '' : '备注：不填写将为您持续推送，需要您手动关闭推动'}}"
      error-message-align="right"
      bind:tap="showPopupContainer('time', 'end')"
    />
    <!-- 补充信息 -->
    <!-- error-message="{{biographical.note ? '' : '例如：诚实可信、技术好、踏实肯干等'}}" -->
    <van-field
      size="large"
      label="补充信息"
      title-width="160rpx"
      value="{{ biographical.note }}"
      placeholder="请选择补充信息"
      readonly
      input-align="right"
      type="textarea"
      autosize
      error-message-align="right"
      id="note"
      is-link
      bind:change="onFieldChange"
      bind:tap="showPopupContainer('note')"
    />
    <van-field
      size="large"
      label="推送状态"
      title-width="160rpx"
      readonly
      input-align="right"
      required
    >
      <view class="btn-slot" slot="button">
        <view style="margin-right: 12rpx;color: #07c160;" wx:if="{{ biographical.status === 'on' }}">已开启</view>
        <van-switch style="margin-bottom: -12rpx;" active-color="#07c160" checked="{{ biographical.status === 'on' }}" bind:change="onSwitchChange" />
        <view style="margin-left: 12rpx" wx:if="{{ biographical.status !== 'on' }}">已关闭</view>
      </view>
    </van-field>
  </van-cell-group>
  <view class="call-container">
    <view class="call-content">
      <view>
        <mutil-style-text text="{{constText}}" />
      </view>
      <view wx:if="{{callListNum}}">
        <mutil-style-text text="{{callListNum}}" rules="{{textRules}}" />
      </view>
      <view wx:if="{{callListText}}">
        <mutil-style-text text="{{callListText}}" rules="{{textRules}}" />
      </view>
    </view>
  </view>
</custom-container>
<popup
  show="{{showPopup}}"
  type="{{popupType}}"
  timeType="time"
  initActiveId="{{activeId}}"
  title="{{popupTitle}}"
  minHour="{{minHour}}"
  minMinute="{{minMinute}}"
  initTime="{{initTime}}"
  checkBoxList="{{checkBoxList}}"
  categoryList="{{categoryList}}"
  max="{{3}}"
  bind:close="closePopupContainer"
  bind:confirm="onConfirmHandle"
/>
<toast wx:ref="toast" text="{{toastText}}" />
</template>

<script>
import mpx, { createPage } from '@mpxjs/core'
import { updateUserInfo } from '@/api'
import config from '@/constant/release.js'
import { personInfoNoteList } from '@/constant/config.js'
import store from '@/store'
import dayjs from 'dayjs'
import guid from '@/utils'
import AddAddressUrl from '@/subpackages/address-manager/pages/add-address.mpx?resolve'

createPage({
  data: {
    showPopup: false,
    noticeText: '如需更改工厂信息，请先关闭推送状态，{完成后再开启}，确认关闭？',
    popupType: '',
    initTime: '',
    minHour: 0,
    minMinute: 0,
    active: [],
    toastText: '',
    popupTitle: '',
    textRules: {
      '{x}': {
        style: 'margin: 0 16rpx; font-size: 60rpx; color: #07c160;'
      }
    },
    noticeRules: {
      '{x}': {
        style: 'color: #ff525d;font-weight:bold;'
      }
    },
    checkBoxList: personInfoNoteList
  },
  computed: {
    ...store.mapState(['addressList', 'adInfo', 'biographical']),
    pageCanEdit() {
      if (this.biographical.status === 'off') {
        return true
      }
      if (this.biographical.id) {
        return false
      }
      return true
    },
    pageType() {
      if (this.biographical.id) {
        return 'edit'
      }
      return 'new'
    },
    constText() {
      return this.pageType === 'new' ? '{发布}将为您{推送}给对应匹配{招工方}' : '{已}为您{推送}给能匹配的{招工方}'
    },
    categoryList() {
      return config['findWorker'].category
    },
    activeId() {
      return this.biographical.category ? this.biographical.category.split(';') : []
    },
    callList() {
      return this.biographical.callList || []
    },
    callListText() {
      if (this.callList.length) {
        const times = this.callList.reduce((sum, item) => sum + item.times, 0)
        return `累计被呼叫{${times}}次`
      }
      return ''
    },
    callListNum() {
      if (this.callList.length) {
        return `已有{${this.callList.length}}人呼叫过您`
      }
      return ''
    }
  },
  onLoad() {
  },
  async onShow() {
    await this.setLocation()
    if (this.adInfo.address) {
      this.setState({
        biographical: {
          ...this.biographical,
          poi: {
            ...this.adInfo,
            name: this.adInfo.address,
            detail: this.adInfo.address
          }
        }
      })
    }
    this.initAddressPhone()
  },
  methods: {
    ...store.mapMutations(['setState']),
    ...store.mapActions(['setLocation']),
    initAddressPhone() {
      const item = this.addressList.find(item => item.checked)
      if (item?.id) {
        this.setState({
          biographical: {
            ...this.biographical,
            tel: item.phone,
            poi: item.address,
            name: item.name
          }
        })
      }
    },
    showPopupContainer(type, currentTimeType) {
      if (!this.pageCanEdit) {
        this.gotoChangeStatus()
        return
      }
      if (type === 'time') {
        this.currentTimeType = currentTimeType
        this.initTime = this.biographical.time[currentTimeType]
        this.popupTitle = '请选择到岗时间'
        if (currentTimeType === 'end' && this.biographical.time.start) {
          this.popupTitle = '请选择截止时间'
          if (!this.initTime) {
            this.initTime = dayjs(Date.now()).format('HH:mm')
          }
          this.minHour = +this.biographical.time.start.split(':')[0]
          this.minMinute = +this.biographical.time.start.split(':')[1]
        }
      } else if (!this.addressList.length && type === 'address') {
        this.popupTitle = '请选择地址'
        mpx.navigateTo({
          url: AddAddressUrl
        })
        return
      } else if (type === 'note') {
        this.popupTitle = '请选择补充内容'
      }
      this.popupType = type
      this.showPopup = true
    },
    closePopupContainer() {
      this.showPopup = false
    },
    onConfirmHandle({ detail = {} } = {}) {
      const { data, type } = detail
      const actions = {
        category: () => {
          this.setState({
            biographical: {
              ...this.biographical,
              category: data.map(item => item.id).join(';'),
              categoryName: data.map(item => item.text).join(';')
            }
          })
        },
        address: () => {
          this.setState({
            biographical: {
              ...this.biographical,
              poi: data.poi,
              tel: data.tel
            }
          })
        },
        time: () => {
          this.setState({
            biographical: {
              ...this.biographical,
              time: {
                ...this.biographical.time,
                [this.currentTimeType]: data.time
              }
            }
          })
          if (this.currentTimeType === 'start') {
            this.setState({
              biographical: {
                ...this.biographical,
                time: {
                  ...this.biographical.time,
                  end: ''
                }
              }
            })
          }
        },
        note: () => {
          this.setState({
            biographical: {
              ...this.biographical,
              note: data.selectedList.map(item => item.name).join('、')
            }
          })
        }
      }
      actions?.[type]?.()
      this.closePopupContainer()
    },
    async gotoChangeStatus() {
      if (this.pageCanEdit) {
        return
      }
      const res = await mpx.showModal({
        title: '提示',
        content: '如需更改工厂信息，请先关闭推送状态，完成后再开启，确认关闭？'
      })
      console.log(res)
      if (res.confirm) {
        console.log(this.biographical)
        this.setState({
          biographical: {
            ...this.biographical,
            status: 'off'
          }
        })
      }
    },
    async onSwitchChange() {
      const biographical = JSON.parse(JSON.stringify(this.biographical))
      biographical.status = biographical.status === 'on' ? 'off' : 'on'
      if (biographical.id) {
        if (biographical.status === 'on') {
          biographical.start = +biographical.time.start.replace(':', '')
          biographical.end = +biographical.time.end.replace(':', '') || null
        }
        mpx.showLoading({
          title: '更新状态中……'
        })
        const res = await updateUserInfo({ biographical })
        if (res.code === 200) {
          mpx.showToast({
            title: '更新状态成功'
          })
          this.setState({ biographical })
        } else {
          mpx.hideLoading()
        }
      } else {
        this.setState({ biographical })
      }
    },
    onFieldChange(e) {
      this.setState({
        biographical: {
          ...this.biographical,
          [e.target.id]: e.detail
        }
      })
    },
    validate() {
      const telReg = /^(?:(?:\+|00)86)?1[3-9]\d{9}$/
      const result = {
        text: '',
        success: false
      }
      if (!this.biographical.category) {
        result.text = "请选择{技能}"
        return result
      }
      if (!this.biographical.poi.detail) {
        result.text = "请填入{地址}"
        return result
      }
      if (!this.biographical.tel) {
        result.text = "请填入{电话}"
        return result
      }
      if (!telReg.test(this.biographical.tel)) {
        result.text = '请输入{正确的手机号}'
        return result
      }
      if (telReg.test(this.biographical.note)) {
        result.text = '{补充信息}中不可带{电话号码}'
        return result
      }
      result.success = true
      return result
    },
    async release() {
      const vali = this.validate()
      if (!vali.success) {
        this.toastText = vali.text
        setTimeout(() => {
          this.$refs.toast.show()
        }, 0)
        return
      }
      const biographical = JSON.parse(JSON.stringify(this.biographical))
      if (!biographical.id) {
        biographical.id = guid()
      }
      biographical.start = +biographical.time.start.replace(':', '')
      biographical.end = +biographical.time.end.replace(':', '') || null
      mpx.showLoading({
        title: this.pageType === 'edit' ? '更新中……' : '发布中……'
      })
      const res = await updateUserInfo({
        biographical
      })
      if (res.code === 200) {
        mpx.showToast({
          title: this.pageType === 'edit' ? '更新成功' : '发布成功',
          success: () => {
            this.setState({
              biographical
            })
          }
        })
      }
    }
  }
})
</script>

<style lang="stylus" scoped>
.dialog-container
  padding 32rpx
  font-szie 32rpx
  letter-spacing 2rpx
  border-top 2rpx solid #ebedf0
.btn-slot
  display flex
  justify-content center
  align-items center
.call-container
  padding 16rpx 32rpx
  margin-bottom -32rpx
  padding-bottom 100rpx
  .call-content
    background #fff
    padding 32rpx
    font-size 40rpx
    font-weight bold
    border-radius 16rpx
</style>

<script name="json">
module.exports = {
  usingComponents: {
    "popup": "@/subpackages/superstream/compontens/popup/index.mpx?root=superstream",
    "mutil-style-text": "@/compontens/base/mutil-style-text.mpx?root=common-coms-page",
    "toast": "@/compontens/base/toast.mpx?root=common-coms-page",
  },
  "componentPlaceholder": {
    "mutil-style-text": "view",
    "popup": "view",
    "toast": "view"
  },
  "navigationStyle": "custom",
  "disableScroll": true
}
</script>
