<template>
  <view class="container">
    <view class="map">
      <map
        longitude="{{location.longitude}}"
        latitude="{{location.latitude}}"
        scale="{{scale}}"
        markers="{{markers}}"
        polyline="{{polyline}}"
        show-location
        enable-traffic
        enable-overlooking
      ></map>
    </view>
  </view>
</template>

<script>
import mpx, { createComponent, onShow } from '@mpxjs/core'
import store from '@/store'
import guid from '@/utils'

createComponent({
  properties: {
    endInfo: {
      type: Object,
      value: {}
    }
  },
  data: {
    scale: 12,
    polyline: []
  },
  computed: {
    ...store.mapState(['location', 'mapSdk']),
    markers () {
      const markers = []
      if (this.location) {
        markers.push({
          id: 1,
          latitude: this.location.latitude,
          longitude: this.location.longitude,
          height: 18,
          width: 12,
          callout: {
            content: '当前位置',
            color: '#333333',
            fontSize: 14,
            borderRadius: 4,
            bgColor: '#ffffff',
            padding: 6,
            display: 'ALWAYS',
            textAlign: 'center'
          }
        })
      }
      if (this.endInfo.detail) {
        markers.push({
          id: 2,
          latitude: this.endInfo.location.lat,
          longitude: this.endInfo.location.lng,
          height: 18,
          width: 12,
          callout: {
            content: this.endInfo.detail,
            color: '#333333',
            fontSize: 14,
            borderRadius: 4,
            bgColor: '#ffffff',
            padding: 6,
            display: 'ALWAYS',
            textAlign: 'center'
          }
        })
      }
      return markers
    }
  },
  watch: {
    markers (val) {
      if (val.length === 2) {
        const _this = this
        this.mapSdk.direction({
          mode: 'walking',
          from: {
            latitude: val[0].latitude,
            longitude: val[0].longitude
          },
          to: {
            latitude: val[1].latitude,
            longitude: val[1].longitude
          },
          success (res) {
            _this.polyline = res.result.routes.map((item) => ({
              points: _this.changepolylineData(item.polyline),
              color: '#07c160',
              width: 10
            }))
            _this.scale = 12
          },
          fail(err) {
            console.log(err)
          }
        })
      }
    }
  },
  async attached () {
    await this.setLocation()
  },
  methods: {
    ...store.mapActions(['setLocation']),
    changepolylineData (coors) {
      const kr = 1000000
      const pl = []
      for (let i = 2; i < coors.length; i++) {
        coors[i] = Number(coors[i - 2]) + Number(coors[i]) / kr
      }
      for (let i = 0; i < coors.length; i += 2) {
        pl.push({ latitude: coors[i], longitude: coors[i + 1] })
      }
      return pl
    }
  }
})
</script>

<style lang="stylus" scoped>
.container
  width 100%
  height 400px
  display flex
  flex-direction column
  .map
    flex 1
    width 100%
    overflow hidden
    map
      width 100%
      height 100%
</style>
<script name="json">
module.exports = {
  usingComponents: {
  },
  disableScroll: true
}
</script>
