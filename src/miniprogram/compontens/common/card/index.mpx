
<template>
  <view class="container">
    <van-swipe-cell custom-class="{{index % 2 === 1 ? 'jishu' : 'oushu'}}" wx:for="{{renderList}}" wx:key="*this" right-width="{{ canDelete ? 65 : 0 }}">
      <view wx:if="{{canDelete}}" slot="right" class="van-swipe-cell__right" bind:tap="delete(item)">删除</view>
      <view class="list-item" bind:tap="gotoDetail(item)">
        <view wx:if="{{item.tag}}" class="tag">{{item.tag}}</view>
        <view class="list-item_info">
          <image class="list-item_info-img" catchtap="priview(item)" src="{{item.thumb}}"></image>
          <view class="list-item_info-content">
            <view wx:for="{{item.contentList}}" wx:key="title" wx:for-item="content" class="list-item_info-content-item">
              <block wx:if="{{content.type === 'map'}}">
                <text class="list-item_info-content-item_text">{{content.text}}</text>
                <view class="list-item_info-content-item_value">
                  <mutil-style-text class="text" rules="{{content.rules || textRules}}" text="{{content.value}}" />
                  <view wx:if="{{content.right}}" class="distance">{{content.right}}</view>
                </view>
              </block>
              <block wx:elif="{{content.type === 'tag'}}">
                <view class="list-item_info-content-item_tags">
                  <view class="list-item_info-content-item_tags-item" wx:for="{{content.tags}}" wx:key="text" wx:for-item="tag">
                    <mutil-style-text text="{{tag.text}}" rules="{{tag.rules || textRules}}" />
                  </view>
                </view>
              </block>
            </view>
          </view>
        </view>
        <view class="list-item_ope" wx:if="{{buttons.length}}">
          <van-button
            wx:for="{{buttons}}"
            wx:if="{{!b.hide}}"
            size="small"
            style="margin-left: 8rpx"
            wx:for-item="b"
            round
            type="{{b.type || 'default'}}"
            catchtap="clickBtn(item, b)"
            icon="{{b.icon || ''}}"
            custom-class="btn-custom"
          >
            {{b.text}}
          </van-button>
        </view>
      </view>
    </van-swipe-cell>
    <view class="moreload">
      <van-loading wx:if="{{moreLoad.loading}}" type="spinner" size="14px" color="#1989fa">
        <text style="color: #000000;font-weight: bold;">加载中...</text>
      </van-loading>
      <view wx:else bind:tap="loadmore">{{moreLoad.text}}</view>
    </view>
  </view>
</template>

<script>
import mpx, { createComponent } from '@mpxjs/core'
import store from '@/store'
import dayjs from 'dayjs'
import makePhoneToBoss from '@/utils/makePhoneToBoss'
import unreadFun from '@/utils/unread'

createComponent({
  properties: {
    list: {
      type: Array,
      value: []
    },
    buttons: {
      type: Array,
      value: []
    },
    canDelete: {
      type: Boolean,
      value: false
    },
    role: {
      type: String,
      value: 'boss'
    },
    moreLoad: {
      type: Object,
      value: {}
    }
  },
  data: {
    textRules: {
      '{x}': {
        style: 'color: #ee0a24; font-weight: bold;'
      }
    }
  },
  computed: {
    ...store.mapState(['openid', 'fromOrigin', 'adInfo']),
    isWorker() {
      return this.role === 'worker'
    },
    isBoss() {
      return this.role === 'boss'
    },
    renderList() {
      const items = this.list.map(item => {
        if (this.isWorker) {
          item.tag = item.calllist?.length ? `已有${item.calllist.length}人呼叫` : '暂无人呼叫'
        }
        item.thumb = item.images[0] || 'cloud://cloud1-0gfibr1283141-0b78337d158.636c-cloud1-0gfibr1283141-0b78337d158-1307055684/image-cdn/none.png'
        const content = []
        if (this.fromOrigin === 'bossWorker') {
          const distance = item.distance
          let right = ''
          if (distance) {
            if (distance < 0.1) {
              right = '距您100米内'
            } else {
              right = `距您${distance}km`
            }
          }
          // 位置
          content.push({
            type: 'map',
            text: '位置:',
            value: item.poi.detail || item.poi.address,
            right: this.isWorker ? right : ''
          })
          let categoryValue = `${item.categoryName}${item.categorySub ? `(${item.categorySub})` : ''}-{${item.categoryNum}人}-${item.categoryTypeName}`
          content.push({
            type: 'map',
            text: '岗位:',
            value: categoryValue
          })

          // 薪资/单价
          const priceText = item.categoryType === '2' ? '薪资:' : '单价:'
          let priceValue = ''
          if (item.categoryType === '2') {
            priceValue = `{${item.priceMin}${item.priceUnitName}} ~ {${item.priceMax}${item.priceUnitName}}`
          } else {
            priceValue = `{${item.price}${item.priceUnitName}}`
            if (item.num) {
              priceValue += `(单量：{${item.num}件})`
            }
          }
          content.push({
            type: 'map',
            text: priceText,
            value: priceValue
          })
        } else if (this.fromOrigin === 'factoryCooper') {
          const distance = item.distance
          let right = ''
          if (distance) {
            if (distance < 0.1) {
              right = '距您100米内'
            } else {
              right = `距您${distance}km`
            }
          }
          if (item.cooperType === '3') {
            // 位置
            content.push({
              type: 'map',
              text: '裁床地址:',
              value: item.poi.detail || item.poi.address,
              right: this.isWorker ? right : ''
            })
          }
          content.push({
            type: 'map',
            text: '地域要求:',
            value: `{${item.area}}`
          })
          let factoryScaleValue = `${item.factoryScaleName}`
          if (item.factoryScale === '1') {
            item.people && (factoryScaleValue += `-${item.people}人以上`)
          } else if (item.factoryScale === '2') {
            item.people && (factoryScaleValue += `-${item.people}人左右`)
          }
          factoryScaleValue += `-{${item.cooperTypeName}}`
          content.push({
            type: 'map',
            text: '规模要求:',
            value: factoryScaleValue
          })
          content.push({
            type: 'map',
            text: '加工数量:',
            value: `{${item.num}}件左右-{${item.productTypeName}}`
          })
        } else if (this.fromOrigin === 'leaseTransfer') {
          const distance = item.distance
          let right = ''
          if (distance) {
            if (distance < 0.1) {
              right = '距您100米内'
            } else {
              right = `距您${distance}km`
            }
          }
          // 位置
          content.push({
            type: 'map',
            text: '位置:',
            value: item.poi.detail || item.poi.address,
            right: this.isWorker ? right : ''
          })
          content.push({
            type: 'map',
            text: '类别:',
            value: `${item.categoryName}-{${item.floor}楼}-{${item.area}平}`
          })
          content.push({
            type: 'map',
            text: '租金:',
            value: `${item.price}${item.priceUnitName}(押{${item.deposit}个月)}`
          })
        } else if (this.fromOrigin === 'usedDetect') {
          const distance = item.distance
          let right = ''
          if (distance) {
            if (distance < 0.1) {
              right = '距您100米内'
            } else {
              right = `距您${distance}km`
            }
          }
          // 位置
          content.push({
            type: 'map',
            text: '位置:',
            value: item.poi.detail || item.poi.address,
            right: this.isWorker ? right : ''
          })
          let categoryValue = `{${item.categoryName}${item.categorySub ? `(${item.categorySub})` : ''}}`
          content.push({
            type: 'map',
            text: '名称:',
            value: categoryValue
          })
          if (item.price) {
            content.push({
              type: 'map',
              text: '价格:',
              value: `{${item.price}元}`
            })
          }
          if (item.note) {
            content.push({
              type: 'map',
              text: '概述:',
              value: item.note
            })
          }
        } else if (this.fromOrigin === 'tailings') {
          const distance = item.distance
          let right = ''
          if (distance) {
            if (distance < 0.1) {
              right = '距您100米内'
            } else {
              right = `距您${distance}km`
            }
          }
          // 位置
          content.push({
            type: 'map',
            text: '位置:',
            value: item.poi.detail || item.poi.address,
            right: this.isWorker ? right : ''
          })
          content.push({
            type: 'map',
            text: '类别:',
            value: `${item.categoryName}${item.categorySub ? `(${item.categorySub})` : ''}`
          })
          if (item.times?.length) {
            const [start, end] = item.times
            let text = ''
            if (start && end) {
              text = `${start}~${end}`
            } else if (start) {
              text = `${start}以后`
            } else if (end) {
              text = `${end}以前`
            }
            text && content.push({
              type: 'map',
              text: '联系点:',
              value: `{${text}}`
            })
          }
          if (item.note) {
            content.push({
              title: '补充:',
              value: item.note
            })
          }
        }
        content.push({
          type: 'map',
          text: '发布时间:',
          value: `${dayjs(item.RELEASE_ADD_TIME).format('YYYY-MM-DD HH:mm:ss')}`
        })
        const tags = []
        if (this.isBoss) {
          if (item.calllist?.length) {
            tags.push({
              text: `已被{${item.calllist.length}人呼叫过}`
            })
          }
          if (item.readlist?.length) {
            tags.push({
              text: `已有{${item.readlist.length}人阅读}`
            })
          }
        } else if (this.isWorker) {
          const isCall = item.calllist.find(f => f.openid === this.openid)
          const isRead = item.readlist.find(f => f.openid === this.openid)
          if (isCall) {
            tags.push({
              text: `您已{呼叫${isCall.times}次}`
            })
          }
          if (isRead) {
            tags.push({
              text: `您已{阅读${isRead.times}次}`
            })
          }
        }
        tags.forEach(tag => {
          tag.rules = {
            '{x}': {
              style: 'color: #ee0a24; font-weight: bold; margin-left: 4rpx;'
            }
          }
        })
        content.push({ type: 'tag', tags })
        item.contentList = content
        return item
      })
      return items
    }
  },
  methods: {
    clickBtn(item, b) {
      this.triggerEvent('footer-btn', { item, buttonInfo: b })
    },
    gotoDetail(item) {
      this.triggerEvent('footer-btn', {
        item,
        buttonInfo: {
          id: 'gotoDetail'
        }
      })
    },
    priview(item) {
      if (!item.images.length) {
        return
      }
      wx.previewMedia({
        current: 0,
        sources: item.images.map(i => ({
          url: i,
          type: 'image'
        }))
      })
    },
    delete(item) {
      this.triggerEvent('delete', item)
    },
    loadmore() {
      this.triggerEvent('more-load')
    }
  }
})
</script>

<style lang="stylus">
.btn-custom{
  font-weight: bolder;
  font-size: 28rpx !important;
}
</style>
<style lang="stylus" scoped>
@import "@/assets/base.styl"
.van-swipe-cell__right
  width 65px
  height 100%
  background-color #ee0a24
  color #ffffff
  display flex
  align-items center
  justify-content center
  border-radius 16rpx
.list-item
  background #ffffff
  padding 16rpx
  box-sizing border-box
  border-radius 16rpx
  position relative
  margin-bottom 16rpx
  .tag
    position absolute
    top 16rpx
    left 16rpx
    background #ee0a24
    color #ffffff
    font-size 24rpx
    font-weight bold
    padding 2rpx 8rpx
    border-radius 0 28rpx 28rpx 0
    opacity 0.7
  &_info
    display flex
    align-items center
    &-img
      width 160rpx
      height 260rpx
    &-content
      flex 1
      height 260rpx
      overflow hidden
      margin-left 16rpx
      font-size 28rpx
      display flex
      flex-direction column
      justify-content space-between
      &-item
        display flex
        align-items center
        &_text
          width 120rpx
          text-align right
          padding-right 16rpx
        &_value
          flex 1
          overflow hidden
          display flex
          align-items center
          .text
            flex 1
            text-overflow ellipsis
            overflow hidden
            white-space nowrap
          .distance
            color red
            font-size 28rpx
            font-weight bold
        &_tags
          display flex
          &-item
            padding 2rpx 8rpx
            box-sizing border-box
            background #ffffff
            border-radius 8rpx
            box-shadow 0px 4px 20px 0px rgba(0,0,0,0.1)
            margin-right 16rpx
            color #1989fa
            border 2rpx solid #1989fa
  &_ope
    display flex
    justify-content flex-end
    margin-top 18rpx
.moreload
  color #000000
  font-size 28rpx
  font-weight bold
  width 100%
  display flex
  align-items center
  justify-content center
  padding 50rpx 0
</style>

<script type="application/json">
  {
    "usingComponents": {
      "van-loading": "@vant/weapp/loading/index",
      "van-button": "@vant/weapp/button/index",
      "van-swipe-cell": "@vant/weapp/swipe-cell/index",
      "mutil-style-text": "@/compontens/base/mutil-style-text.mpx"
    },
    "disableScroll": true
  }
</script>
