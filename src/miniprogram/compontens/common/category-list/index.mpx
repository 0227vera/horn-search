/**
@file:
todo: 这个地方处理的及其不优雅,但是想快点完成能力,之后再优化吧
*/

<template>
  <view class="container">
    <scroll-view scroll-x class="scroll">
      <view class="level-item">
        <view
          wx:for="{{categoryItems.children}}"
          wx:key="*this"
          class="item {{item.value === categoryItems.selected ? 'selected': ''}}"
          catchtap="levelItem(item)"
        >
          <view class="content">
            <van-icon wx:if="{{item.icon}}" name="{{item.icon}}" />
            {{item.text}}
          </view>
        </view>
      </view>
    </scroll-view>
    <scroll-view scroll-x class="scroll" wx:if="{{level1List.children}}">
      <view class="level-item">
        <view
          wx:for="{{level1List.children}}"
          wx:key="*this"
          class="item {{item.value === level1List.selected ? 'selected': ''}}"
          catchtap="level1Item(item)"
        >
          <view wx:if="{{item.editable && showInput}}" class="input">
            <input
              auto-focus
              type="text"
              wx:model="{{item.text}}"
              bind:input="inputHandle"
              bindblur="blurHandle"
              id="{{item.value}}"
            />
          </view>
          <view class="content" wx:else bind:tap="clickItem(item)">
            <van-icon wx:if="{{item.icon  && item.value === level1List.selected}}" class="icon" name="{{item.icon}}" />
            {{item.text}}
            <text wx:if="{{item.tips && (item.value === level1List.selected || !item.text)}}" class="tips">({{item.tips}})</text>
          </view>
        </view>
      </view>
    </scroll-view>
  </view>
</template>

<script>
import { createComponent } from '@mpxjs/core'
import store from '@/store'
createComponent({
  data: {
    showInput: false
  },
  computed: {
    ...store.mapState(['categoryItems']),
    level1List() {
      return this.categoryItems.children?.find(item => item.value === this.categoryItems.selected) || {}
    }
  },
  ready() {
    const newObj = this.getNewObj(JSON.parse(JSON.stringify(this.categoryItems)))
    this.updateCategoryItems(newObj)
  },
  methods: {
    ...store.mapMutations(['updateCategoryItems']),
    levelItem(item) {
      this.updateCategoryItems(Object.assign(this.categoryItems, {
        selected: item.value
      }))
      this.updateCategoryItems(this.getNewObj(this.categoryItems))
      this.$forceUpdate()
    },
    level1Item(item) {
      const cat = JSON.parse(JSON.stringify(this.categoryItems))
      cat.children.forEach(c => {
        if (c.value === cat.selected) {
          c.selected = item.value
        }
      })
      this.updateCategoryItems(this.getNewObj(cat))
      if (!item.children?.length) {
        // note: 设置配置的组件
        this.triggerEvent('component', item)
      }
    },
    getNewObj(obj) {
      if (obj.children?.length) {
        if (!obj.selected) {
          obj.selected = obj.children[0].value
          obj.children[0] = this.getNewObj(obj.children[0])
        } else if (obj.selected) {
          obj.children.forEach(item => {
            if (item.value === obj.selected) {
              item = this.getNewObj(item)
            }
          })
        }
      } else {
        this.triggerEvent('component', obj)
      }
      return obj
    },
    clickItem(item) {
      if (!item.editable) return
      if (item.value !== this.level1List.selected) return
      this.showInput = true
    },
    inputHandle(e) {
      const id = e.target.id
      const text = e.detail.value
      const cat = JSON.parse(JSON.stringify(this.categoryItems))
      cat.children.forEach(c => {
        c.children.forEach(cc => {
          if (cc.value === id) {
            cc.text = text
          }
        })
      })
      console.log(cat)
      this.updateCategoryItems(cat)
      this.triggerEvent('component', {
        text,
        value: id
      })
    },
    blurHandle() {
      this.showInput = false
    }
  }
})

</script>

<style lang="stylus" scoped>
.container
  position sticky
  top 0
  z-index 99
  background linear-gradient(#E3E0F3, #E3E0F3)
.scroll
  width 100%
  padding 16rpx 32rpx
  box-sizing border-box
.level-item
  display flex
  box-sizing border-box
  .item
    flex-shrink 0
    position relative
    .input
      background #ffffff
      color #333333
      border-radius 32rpx
      font-size 24rpx
      padding 0 15rpx
    .content
      padding 5rpx 15rpx
      font-size 28rpx
      color #333333
      font-weight 500
    .icon
      font-weight 900
      font-size 30rpx
    .tips
      padding-left 10rpx
      color red
    &.selected
      .content
        color #666666
        background #ffffff
        border-radius 32rpx
</style>

<script type="application/json">
  {
    "usingComponents": {
      "van-icon": "@vant/weapp/icon/index"
    }
  }
</script>
