<template>
<scroll-view scroll-x class="scroll">
  <view class="level-item">
    <view
      wx:for="{{categoryItems.children}}"
      wx:key="*this"
      class="item {{item.value === categoryItems.selected ? 'selected': ''}}"
      catchtap="levelItem(item)"
    >
      {{item.text}}
    </view>
  </view>
</scroll-view>
<scroll-view scroll-x class="scroll" wx:if="{{level1List.children}}">
  <view class="level-item">
    <view
      wx:for="{{level1List.children}}"
      wx:key="*this"
      class="item {{item.value === level1List.selected ? 'selected': ''}}"
      catchtap="level1Item(item)"
    >
      {{item.text}}
    </view>
  </view>
</scroll-view>
<scroll-view scroll-x class="scroll" wx:if="{{level2List.children}}">
  <view class="level-item">
    <view
      wx:for="{{level2List.children}}"
      wx:key="*this"
      class="item {{item.value === level2List.selected ? 'selected': ''}}"
      catchtap="level2Item(item)"
    >
      {{item.text}}
    </view>
  </view>
</scroll-view>
<scroll-view scroll-x class="scroll" wx:if="{{level3List.children}}">
  <view class="level-item">
    <view
      wx:for="{{level3List.children}}"
      wx:key="*this"
      class="item {{item.value === level3List.selected ? 'selected': ''}}"
      catchtap="level3Item(item)"
    >
      {{item.text}}
    </view>
  </view>
</scroll-view>
</template>

<script>
import { createComponent } from '@mpxjs/core'
import store from '@/store'
createComponent({
  computed: {
    ...store.mapState(['categoryItems']),
    level1List() {
      return this.categoryItems.children?.find(item => item.value === this.categoryItems.selected) || {}
    },
    level2List() {
      return this.level1List?.children?.find?.(item => item.value === this.level1List.selected) || {}
    },
    level3List() {
      return this.level2List?.children?.find?.(item => item.value === this.level2List.selected) || {}
    },
    level4List() {
      return this.level3List?.children?.find?.(item => item.value === this.level3List.selected) || {}
    }
  },
  watch: {
  },
  ready() {
    const newObj = this.getNewObj(JSON.parse(JSON.stringify(this.categoryItems)))
    this.updateCategoryItems(newObj)
  },
  methods: {
    ...store.mapMutations(['updateCategoryItems']),
    levelItem(item) {
      this.updateCategoryItems(Object.assign(this.categoryItems, {
        selected: item.value
      }))
      this.updateCategoryItems(this.getNewObj(this.categoryItems))
      this.$forceUpdate()
    },
    level1Item(item) {
      const cat = JSON.parse(JSON.stringify(this.categoryItems))
      cat.children.forEach(c => {
        if (c.value === cat.selected) {
          c.selected = item.value
        }
      })
      this.updateCategoryItems(this.getNewObj(cat))
      if (!item.children?.length) {
        // note: 设置配置的组件
        this.triggerEvent('component', item)
      }
    },
    level2Item(item) {
      const cat = JSON.parse(JSON.stringify(this.categoryItems))
      cat.children.forEach(c => {
        if (c.value === cat.selected) {
          c.children.forEach(cc => {
            if (c.selected === cc.value) {
              cc.selected = item.value
            }
          })
        }
      })
      this.updateCategoryItems(this.getNewObj(cat))
      if (!item.children?.length) {
        // note: 设置配置的组件
        this.triggerEvent('component', item)
      }
    },
    level3Item(item) {
      const cat = JSON.parse(JSON.stringify(this.categoryItems))
      cat.children.forEach(c => {
        if (c.value === cat.selected) {
          c.children.forEach(cc => {
            if (c.selected === cc.value) {
              cc.children.forEach(ccc => {
                if (cc.selected === ccc.value) {
                  ccc.selected = item.value
                }
              })
            }
          })
        }
      })
      this.updateCategoryItems(cat)
      if (!item.children?.length) {
        // note: 设置配置的组件
        this.triggerEvent('component', item)
      }
    },
    getNewObj(obj) {
      if (obj.children?.length) {
        if (!obj.selected) {
          obj.selected = obj.children[0].value
          obj.children[0] = this.getNewObj(obj.children[0])
        } else if (obj.selected) {
          obj.children.forEach(item => {
            if (item.value === obj.selected) {
              item = this.getNewObj(item)
            }
          })
        }
      } else {
        this.triggerEvent('component', obj)
      }
      return obj
    }
  }
})

</script>

<style lang="stylus">
.scroll
  width 100%
  padding 16rpx 32rpx
  box-sizing border-box
.level-item
  display flex
  box-sizing border-box
  .item
    margin-right 32rpx
    font-size 24rpx
    color #333333
    font-weight 500
    padding 5rpx 0
    flex-shrink 0
    &.selected
      color #666666
      background #ffffff
      border-radius 32rpx
      padding 5rpx 20rpx
</style>

<script type="application/json">
  {
    "usingComponents": {
      "nav-list": "./nav-list"
    }
  }
</script>
